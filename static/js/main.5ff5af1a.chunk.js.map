{"version":3,"sources":["components/NavBar.js","store/actions/actionType.js","keys.js","components/Layout.js","store/actions/appAction.js","components/AutoComplete.js","components/WeatherUI.js","components/Weather.js","store/actions/weatherAction.js","store/actions/favoritesAction.js","components/Favorites.js","App.js","serviceWorker.js","store/reducers/utilReducer.js","store/reducers/weatherReducer.js","store/reducers/appReducer.js","store/reducers/favoritesReducer.js","store/reducers/rootReducer.js","index.js"],"names":["NavBar","toggleColorHandler","toggleWeatherHandler","color","isBlack","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","name","onClick","e","defaultChecked","data-on","data-off","data-onstyle","data-offstyle","SET_SUGGESTIONS","ERROR","CHANGE_COLOR_THEME","UPDATE_FAVORITES","keys","Layout","this","props","document","getElementById","setAttribute","children","Component","connect","state","app","isFahren","disatch","dispatch","getState","actionType","payload","AutoComplete","inputValue","suggestions","onTextChange","onSelect","placeholder","value","onChange","target","length","map","item","i","key","LocalizedName","WeatherUI","currentWeather","city","fiveNext","onAddFav","iconNumber","num","cToF","celsius","fahr","Math","floor","src","WeatherIcon","alt","Temperature","Metric","Value","day","Minimum","dateStr","Date","getDay","Day","Icon","Weather","userInputText","suggestionsArr","onSuggestionSelect","currentPick","weeklyWeather","addToFavorites","weather","userInput","currWeather","currPick","text","URL_AUTO_COMPLETE","axios","get","then","res","data","tempPick","Key","URL_CURRENT_WEATHER","ress","catch","err","URL_WEEKLY_WEATHER","DailyForecasts","suggestion","localStorage","getItem","setItem","storedNames","JSON","parse","namesArr","includes","filter","stringify","push","Favorites","favorites","isLoaded","App","route","basename","exact","path","component","Boolean","window","location","hostname","match","updateObject","oldObject","newObject","initState","weatherReducer","action","slice","appReducer","isFavorite","rootReducer","combineReducers","favoritesReducer","composeEnchancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ff5af1a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = ({ toggleColorHandler, toggleWeatherHandler, isBlack }) => {\r\n    let color = isBlack ? \"dark\" : \"light\"\r\n    return (\r\n\r\n        <nav className={` navbar navbar-expand-lg navbar-${color} bg-${color}`}>\r\n            <Link className=\"navbar-brand\" to={\"/\"}>Herolo_Weather</Link>\r\n\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                {/* left side links */}\r\n                <ul className=\"navbar-nav mr-auto\">\r\n\r\n                    <button className=\"btn\" name=\"togglecolor\" onClick={(e) => toggleColorHandler()}> <input\r\n                        type=\"checkbox\" defaultChecked data-toggle=\"toggle\" data-on=\"White\" data-off=\"Black\" data-onstyle=\"light\" data-offstyle=\"dark\" /></button>\r\n                    <button className=\"btn\" name=\"toggleweather\" onClick={(e) => toggleWeatherHandler()}><input\r\n                        type=\"checkbox\" defaultChecked data-toggle=\"toggle\" data-on=\"Celsius\" data-off=\"Fahrenheit\" data-onstyle=\"success\" data-offstyle=\"danger\" /></button>\r\n\r\n                </ul>\r\n                {/* right side links*/}\r\n                <ul className=\"navbar-nav \">\r\n                    <li><Link to={\"/\"}>Home</Link></li>\r\n                    <li><Link to={\"/favorite\"}>Favorite</Link></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","export const CHANGE_USER_INPUT=\"text changed success\";\r\nexport const SET_SUGGESTIONS=\"suggestions changed success\";\r\nexport const SET_CURR_PICK=\"current pick setted\";\r\nexport const SET_CURR_WEATHER=\"current weather setted\";\r\nexport const ERROR=\"error over here !!!\"\r\nexport const SET_WEEKLY_WEATHER=\"weekly weather setted\";\r\nexport const CHANGE_COLOR_THEME=\"app theme black/white changed success\"\r\nexport const CHANGE_WEATHER_TYPE=\"app weather type c/f changed success\"\r\nexport const UPDATE_FAVORITES=\"favorites was updated success\"","export const keys={\r\n    API_KEY:\"6YDrQ10g5FAA0k68qYXEYeTedWWTVAzL\"\r\n}\r\n// 6YDrQ10g5FAA0k68qYXEYeTedWWTVAzL\r\n// AYthUeKgEFWgB4WIvIEGAxrQr2RrslKb","import React, { Component } from \"react\";\r\nimport {connect} from 'react-redux'\r\nimport NavBar from './NavBar'\r\nimport * as actionType from '../store/actions/index'\r\nclass Layout extends Component {\r\n  \r\n  render(){\r\n    this.props.isBlack ? document.getElementById(\"myBody\").setAttribute(\"class\",\"isBlack\"):document.getElementById(\"myBody\").setAttribute(\"class\",\"\")\r\n    return (\r\n      <div className={this.props.isBlack?\"isBlack\":\"\"}>\r\n          <NavBar isBlack={this.props.isBlack} toggleColorHandler={this.props.toggleColorHandler} toggleWeatherHandler={this.props.toggleWeatherHandler}/>\r\n      <div className=\"container\">\r\n        {this.props.children}\r\n      </div>\r\n       \r\n           \r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      isBlack:state.app.isBlack,\r\n      isFahren:state.app.isFahren\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps=(disatch)=>{\r\n  return{\r\n    toggleColorHandler:()=>disatch(actionType.toggleColorHandler()),\r\n    toggleWeatherHandler:()=>disatch(actionType.toggleWeatherHandler()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Layout)","import * as actionType from \"./actionType\"\r\n\r\nexport const toggleColorHandler=()=>{\r\n    return (dispatch,getState)=>{\r\n        dispatch({type:actionType.CHANGE_COLOR_THEME,payload:!getState().app.isBlack})\r\n    }\r\n}\r\nexport const toggleWeatherHandler=()=>{\r\n    return (dispatch,getState)=>{\r\n        dispatch({type:actionType.CHANGE_WEATHER_TYPE,payload:!getState().app.isFahren})\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nconst AutoComplete=({inputValue,suggestions,onTextChange,onSelect})=> {\r\n    const renderSuggestions=()=>{\r\n        if(!suggestions.length) return null\r\n        return(\r\n            <ul>\r\n                {suggestions.map((item,i)=><li onClick={()=>onSelect(item)} key={i} >{item.LocalizedName}</li>)}\r\n            </ul>\r\n        )\r\n}\r\n    return (\r\n        <div className=\"AutoCompleteText mt-3\">\r\n            <input placeholder=\"Enter City...   example:'Tel Aviv'\" value={inputValue} onChange={(e) => onTextChange(e.target.value)}  type=\"text\"/>\r\n            {renderSuggestions()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AutoComplete;","import React from 'react';\r\n\r\nconst WeatherUI = ({ currentWeather,city, fiveNext,isFahren ,onAddFav}) => {\r\n    const dateToDay = (dateStr) => {\r\n        // \"2019-11-25T07:00:00+09:00\"\r\n        let days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        let d = new Date(dateStr);\r\n        let dayName = days[d.getDay()];\r\n        return dayName\r\n\r\n    }\r\n    const iconNumber = (num) => {\r\n        if (num <= 9) return \"0\" + num\r\n        else return num\r\n    }\r\n    const cToF=(celsius)=> {\r\n        let fahr = celsius * 9 / 5 + 32;\r\n        return Math.floor(fahr)\r\n    }\r\n    return (\r\n        <div className=\"d-flex flex-column justify-content-between WeatherUI mt-3 \">\r\n\r\n            <div className=\"d-flex justify-content-between mt-3\">\r\n                <div className=\"d-flex\">\r\n\r\n                    <img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${iconNumber(currentWeather[0].WeatherIcon)}-s.png`} alt=\"currentWeatherIcon\" />\r\n                    <div className=\"d-flex flex-column justify-content-between ml-3\">\r\n                        <h3 className=\"\">{city}</h3>\r\n                        {isFahren?<h3>{cToF(currentWeather[0].Temperature.Metric.Value)} &#8457;</h3>:<h3>{currentWeather[0].Temperature.Metric.Value} &#8451;</h3>} \r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mr-2\">\r\n                    <button className=\"btn\"><i className=\"material-icons\">favorite</i></button>\r\n                    <button className=\"btn btn-primary\" onClick={(e)=>onAddFav()} > add Favorite</button>\r\n                </div>\r\n            </div>\r\n            {/* Five Next Days */}\r\n            <div className=\"d-flex justify-content-around text-center dailyBox pb-3 pt-2\">\r\n                {fiveNext && fiveNext.map((day,i) => {\r\n                    cToF(day.Temperature.Minimum.Value)\r\n                    return (\r\n                        <div key={i} className=\"d-flex flex-column justify-content-around mt-1\">\r\n                            <h5>{dateToDay(day.Date)}</h5>\r\n                            {isFahren?<p>{cToF(day.Temperature.Minimum.Value)} &#8457;</p>:<p>{day.Temperature.Minimum.Value} &#8451;</p>}  \r\n                            <img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${iconNumber(day.Day.Icon)}-s.png`} alt=\"dailyIcon\" />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default WeatherUI;\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport * as actionType from '../store/actions/index'\r\nimport AutoComplete from './AutoComplete';\r\nimport WeatherUI from './WeatherUI'\r\nclass Weather extends Component {\r\n    componentDidMount(){\r\n        // this.props.onTextChange(\"tel aviv\")\r\n    }\r\n    render() {\r\n        \r\n          \r\n        return (\r\n            <div>\r\n                {/* <AutoComplete onTextChange={this.props.onTextChange} suggestions={this.props.suggestionsArr&&this.props.suggestionsArr.map(sugg=>sugg.LocalizedName)} onSelect={this.onSelect}/> */}\r\n                <AutoComplete \r\n                inputValue={this.props.userInputText} \r\n                onTextChange={this.props.onTextChange} \r\n                suggestions={this.props.suggestionsArr} \r\n                onSelect={this.props.onSuggestionSelect}\r\n                />\r\n                {this.props.currentWeather.length>=1 && \r\n                <WeatherUI \r\n                currentWeather={this.props.currentWeather} \r\n                city={this.props.currentPick.city} \r\n                fiveNext={this.props.weeklyWeather} \r\n                isFahren={this.props.isFahren}\r\n                onAddFav={this.props.addToFavorites}\r\n                />}\r\n                \r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateHandler = state => {\r\n    return {\r\n        userInputText:state.weather.userInput,\r\n        suggestionsArr:state.weather.suggestions,\r\n        currentWeather:state.weather.currWeather,\r\n        currentPick:state.weather.currPick,\r\n        weeklyWeather:state.weather.fiveNext,\r\n        isFahren:state.app.isFahren\r\n    };\r\n};\r\nconst mapStateDispatch = dispatch => {\r\n    return {\r\n        onTextChange:(text)=> dispatch(actionType.onTextChange(text)),\r\n        onSuggestionSelect:(suggestion)=>dispatch(actionType.onSuggestionSelect(suggestion)),\r\n        addToFavorites:()=>dispatch(actionType.addToFavorites())\r\n    };\r\n};\r\nexport default connect(mapStateHandler,mapStateDispatch)(Weather) \r\n","import * as actionType from \"./actionType\"\r\nimport axios from 'axios';\r\nimport {keys} from '../../keys'\r\n\r\n\r\nexport const onTextChange=(text)=>{\r\n    return (dispatch,getState)=>{\r\n        dispatch({type:actionType.CHANGE_USER_INPUT,payload:text})\r\n        const URL_AUTO_COMPLETE=`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${keys.API_KEY}&q=${getState().weather.userInput}&language=en-us`\r\n        \r\n        axios.get(URL_AUTO_COMPLETE).then(res=>{\r\n            dispatch({type:actionType.SET_SUGGESTIONS,payload:res.data})\r\n            let tempPick=getState().weather.currPick.key!==\"\"?getState().weather.currPick:{key:getState().weather.suggestions[0].Key,city:getState().weather.suggestions[0].LocalizedName}\r\n            const URL_CURRENT_WEATHER=`https://dataservice.accuweather.com/currentconditions/v1/${tempPick.key}?apikey=${keys.API_KEY}`\r\n            axios.get(URL_CURRENT_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_CURR_WEATHER,payload:ress.data})\r\n                dispatch({type:actionType.SET_CURR_PICK,payload:{city:res.data[0].LocalizedName,key:res.data[0].Key}}) \r\n            }).catch(err=>{\r\n                dispatch({type:actionType.ERROR,payload:err})\r\n                \r\n            })\r\n            const URL_WEEKLY_WEATHER=`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${tempPick.key}?apikey=${keys.API_KEY}&metric=true`\r\n            axios.get(URL_WEEKLY_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_WEEKLY_WEATHER,payload:ress.data.DailyForecasts})\r\n                \r\n            }).catch(err=>{\r\n                dispatch({type:actionType.ERROR,payload:err})\r\n                \r\n            })\r\n        }).catch(err=>{\r\n            dispatch({type:actionType.ERROR,payload:err})\r\n            \r\n        })\r\n        \r\n    }\r\n}\r\nexport const onSuggestionSelect=(suggestion)=>{\r\n    return (dispatch,getState)=>{\r\n        dispatch({type:actionType.CHANGE_USER_INPUT,payload:suggestion.LocalizedName})\r\n        dispatch({type:actionType.SET_CURR_PICK,payload:{city:suggestion.LocalizedName,key:suggestion.Key}})\r\n        const URL_CURRENT_WEATHER=`https://dataservice.accuweather.com/currentconditions/v1/${getState().weather.currPick.key}?apikey=${keys.API_KEY}`\r\n            axios.get(URL_CURRENT_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_CURR_WEATHER,payload:ress.data})\r\n            }).catch(err=>{})\r\n            const URL_WEEKLY_WEATHER=`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${getState().weather.currPick.key}?apikey=${keys.API_KEY}&metric=true`\r\n            axios.get(URL_WEEKLY_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_WEEKLY_WEATHER,payload:ress.data.DailyForecasts})\r\n                \r\n            }).catch(err=>{})\r\n        dispatch({type:actionType.SET_SUGGESTIONS,payload:[]})\r\n        \r\n    }\r\n}\r\n","import * as actionType from \"./actionType\"\r\n\r\n\r\nexport const addToFavorites=()=>{\r\n    if(localStorage.getItem(\"myFavWeather\")===null) localStorage.setItem('myFavWeather', \"[]\");\r\n    let storedNames = JSON.parse(localStorage.getItem(\"myFavWeather\"));\r\n    let namesArr = storedNames.map(name=>{\r\n        return name.city\r\n    })\r\n    \r\n    \r\n    return (dispatch,getState)=>{\r\n        if(namesArr.includes(getState().weather.currPick.city)){\r\n            storedNames=storedNames.filter(name=>{\r\n                return name.city!==getState().weather.currPick.city\r\n            })\r\n            localStorage.setItem('myFavWeather', JSON.stringify(storedNames));\r\n            dispatch({type:actionType.UPDATE_FAVORITES,payload:storedNames})\r\n        }else{\r\n            storedNames.push(getState().weather.currPick)\r\n            localStorage.setItem('myFavWeather', JSON.stringify(storedNames));\r\n            dispatch({type:actionType.UPDATE_FAVORITES,payload:storedNames})\r\n        }\r\n        \r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport { keys } from '../keys'\r\nclass Favorites extends Component {\r\n    state = {\r\n        favorites: [],\r\n        isLoaded: false\r\n    }\r\n    // componentDidMount() {\r\n        // this.setState({favorites:JSON.parse(localStorage.getItem(\"myFavWeather\"))},()=>{\r\n        //     console.log(this.state);\r\n        //     this.setState({isLoaded:true})\r\n\r\n        // })\r\n        // console.log(localStorage.getItem(\"myFavWeather\"));\r\n        \r\n        // if (localStorage.getItem(\"myFavWeather\") === null) return\r\n        //     let tempFav = JSON.parse(localStorage.getItem(\"myFavWeather\"))\r\n        //     let tempArr = []\r\n        //     if (tempFav.length >= 5) {\r\n        //         for (let i = 0; i < 4; i++) {\r\n        //             console.log(tempFav[i]);\r\n                    \r\n                    // const URL_CURRENT_WEATHER = `http://dataservice.accuweather.com/currentconditions/v1/${tempFav[i].key}?apikey=${keys.API_KEY}`\r\n                    // axios.get(URL_CURRENT_WEATHER).then(res => {\r\n                    //     tempArr.push(res.data)\r\n                        \r\n                    // }).catch(err => {\r\n\r\n                    // })\r\n                // }\r\n            //     this.setState({favorites:tempArr},()=>{\r\n            //         console.log(this.state.favorites);\r\n                    \r\n            //     })\r\n            // }else{\r\n            //     for (let i = 0; i < tempFav.length; i++) {\r\n            //         console.log(tempFav[i]);\r\n                    \r\n                    // const URL_CURRENT_WEATHER = `http://dataservice.accuweather.com/currentconditions/v1/${tempFav[i].key}?apikey=${keys.API_KEY}`\r\n                    // axios.get(URL_CURRENT_WEATHER).then(res => {\r\n                    //     tempArr.push(res.data)\r\n                        \r\n                    // }).catch(err => {\r\n\r\n                    // })\r\n            //     }\r\n            //     this.setState({favorites:tempArr},()=>{\r\n            //         console.log(this.state.favorites);\r\n                    \r\n            //     })\r\n            // }\r\n        \r\n\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex justify-content-around text-center dailyBox pb-3 pt-2\">\r\n                <h1>Favorites</h1>\r\n                \r\n                        <div className=\"d-flex flex-column justify-content-around mt-1\">\r\n                            <h5>Tel-Aviv</h5>\r\n                            <p>25 &#8457;</p>\r\n                            <img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/05-s.png`} alt=\"dailyIcon\" />\r\n                        </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Favorites;","import React, { Component } from 'react';\nimport Layout from './components/Layout';\nimport {HashRouter,Switch,Route} from 'react-router-dom';\nimport Weather from './components/Weather';\nimport Favorites from './components/Favorites'\nclass App extends Component {\n  componentDidMount(){\n    \n    \n  }\n  render() {\n    const route=(\n      <HashRouter basename=\"/\">\n        <Route exact path=\"/\" component={Weather} />\n        <Route  path=\"/favorite\" component={Favorites} />\n      </HashRouter>\n    )\n    return (\n      <Layout>\n        {route}\n      </Layout>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject,newObject)=>{\r\n    return {\r\n        ...oldObject,\r\n        ...newObject\r\n    }\r\n}","import * as actionType from \"../actions/actionType\"\r\nimport { updateObject } from \"./utilReducer\"\r\nconst initState = {\r\n  userInput: \"\",\r\n  suggestions: [],\r\n  currPick: {city:\"\",key:\"\"},\r\n  currWeather: [],\r\n  fiveNext: [],\r\n  err:\"\"\r\n}\r\nconst weatherReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actionType.CHANGE_USER_INPUT:\r\n      return updateObject(state, { userInput: action.payload })\r\n    case actionType.SET_SUGGESTIONS:\r\n      return updateObject(state, { suggestions: action.payload.length > 3 ? action.payload.slice(0, 3) : action.payload })\r\n    case actionType.SET_CURR_PICK:\r\n      return updateObject(state, { currPick: action.payload })\r\n    case actionType.SET_CURR_WEATHER:\r\n      return updateObject(state,{currWeather:action.payload})\r\n    case actionType.SET_WEEKLY_WEATHER:\r\n      return updateObject(state,{fiveNext:action.payload})\r\n      case actionType.SET_WEEKLY_WEATHER:\r\n        return updateObject(state,{err:action.payload})\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default weatherReducer","import * as actionType from \"../actions/actionType\"\r\nimport { updateObject } from \"./utilReducer\"\r\nconst initState = {\r\n  isFahren:false,\r\n  isBlack:false\r\n}\r\nconst appReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actionType.CHANGE_COLOR_THEME:\r\n      return updateObject(state, { isBlack:action.payload })\r\n    case actionType.CHANGE_WEATHER_TYPE:\r\n        return updateObject(state, { isFahren:action.payload })\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default appReducer","import * as actionType from \"../actions/actionType\"\r\nimport { updateObject } from \"./utilReducer\"\r\nconst initState = {\r\n  favorites:[],\r\n  isFavorite:false\r\n}\r\nconst appReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actionType.UPDATE_FAVORITES:\r\n      return updateObject(state, { favorites:action.payload })\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default appReducer","import weatherReducer from './weatherReducer'\r\nimport appReducer from './appReducer'\r\nimport favoritesReducer from './favoritesReducer'\r\nimport { combineReducers } from 'redux'\r\nconst rootReducer = combineReducers({\r\n    app:appReducer,\r\n    weather: weatherReducer,\r\n    favorites:favoritesReducer\r\n    \r\n    \r\n})\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\nimport {createStore,applyMiddleware,compose} from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nconst composeEnchancers = process.env.NODE_ENV ===\"development\" ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\nconst store=createStore(rootReducer,composeEnchancers(applyMiddleware(thunk)))\nconst app=(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n    )\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}