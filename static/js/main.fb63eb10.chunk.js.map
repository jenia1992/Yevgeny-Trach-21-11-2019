{"version":3,"sources":["components/NavBar.js","store/actions/actionType.js","keys.js","store/actions/favoritesAction.js","components/Layout.js","store/actions/appAction.js","store/actions/weatherAction.js","components/AutoComplete.js","components/WeatherUI.js","components/Weather.js","components/Favorites.js","App.js","serviceWorker.js","store/reducers/utilReducer.js","store/reducers/weatherReducer.js","store/reducers/appReducer.js","store/reducers/favoritesReducer.js","store/reducers/rootReducer.js","index.js"],"names":["NavBar","toggleColorHandler","toggleWeatherHandler","isBlack","isFahren","color","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","name","onClick","e","defaultChecked","data-on","data-off","data-onstyle","data-offstyle","SET_SUGGESTIONS","SET_CURR_PICK","ERROR","CHANGE_COLOR_THEME","UPDATE_FAVORITES","keys","Layout","this","props","initCall","document","getElementById","setAttribute","children","Component","connect","state","app","disatch","dispatch","getState","actionType","payload","URL_CURRENT_WEATHER","axios","get","then","ress","data","city","key","catch","err","URL_WEEKLY_WEATHER","DailyForecasts","AutoComplete","inputValue","suggestions","onTextChange","onSelect","placeholder","value","onChange","target","length","map","item","i","LocalizedName","WeatherUI","currentWeather","fiveNext","onAddFav","iconNumber","num","cToF","celsius","fahr","Math","floor","src","WeatherIcon","alt","Temperature","Metric","Value","style","localStorage","getItem","JSON","parse","includes","day","Minimum","dateStr","Date","getDay","Day","Icon","Weather","userInputText","suggestionsArr","onSuggestionSelect","currentPick","weeklyWeather","addOrRemoveFavorites","weather","userInput","currWeather","currPick","text","URL_AUTO_COMPLETE","res","tempPick","Key","suggestion","setItem","favoritesArr","namesArr","filter","stringify","push","Favorites","favoritesLocalStorage","isLoaded","message","setState","callCurrentWeather","height","fav","favorites","isFavLoad","isFavorite","arrCallkeys","callKey","App","route","exact","path","component","Boolean","window","location","hostname","match","updateObject","oldObject","newObject","initState","weatherReducer","action","slice","appReducer","rootReducer","combineReducers","favoritesReducer","composeEnchancers","compose","store","createStore","applyMiddleware","thunk","basename","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb63eb10.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = ({ toggleColorHandler, toggleWeatherHandler, isBlack ,isFahren }) => {\r\n    let color = isBlack ? \"dark\" : \"light\"\r\n    return (\r\n\r\n        <nav className={` navbar navbar-expand-lg navbar-${color} bg-${color}`}>\r\n            <Link className=\"navbar-brand\" to={\"/\"}>Herolo_Weather</Link>\r\n\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                {/* left side links */}\r\n                <ul className=\"navbar-nav mr-auto\">\r\n\r\n                    <button className=\"btn\" name=\"togglecolor\" onClick={(e) => toggleColorHandler()}> <input\r\n                        type=\"checkbox\" defaultChecked={!isBlack} data-toggle=\"toggle\" data-on=\"White\" data-off=\"Black\" data-onstyle=\"light\" data-offstyle=\"dark\" /></button>\r\n                    <button className=\"btn\" name=\"toggleweather\" onClick={(e) => toggleWeatherHandler()}><input\r\n                        type=\"checkbox\" defaultChecked={!isFahren} data-toggle=\"toggle\" data-on=\"Celsius\" data-off=\"Fahrenheit\" data-onstyle=\"success\" data-offstyle=\"danger\" /></button>\r\n\r\n                </ul>\r\n                {/* right side links*/}\r\n                <ul className=\"navbar-nav \">\r\n                    <li><Link to={\"/\"}>Home</Link></li>\r\n                    <li><Link to={\"/favorite\"}>Favorite</Link></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","export const CHANGE_USER_INPUT=\"text changed success\";\r\nexport const SET_SUGGESTIONS=\"suggestions changed success\";\r\nexport const SET_CURR_PICK=\"current pick setted\";\r\nexport const SET_CURR_WEATHER=\"current weather setted\";\r\nexport const ERROR=\"error over here !!!\"\r\nexport const SET_WEEKLY_WEATHER=\"weekly weather setted\";\r\nexport const CHANGE_COLOR_THEME=\"app theme black/white changed success\"\r\nexport const CHANGE_WEATHER_TYPE=\"app weather type c/f changed success\"\r\nexport const UPDATE_FAVORITES=\"favorites was updated success\"","export const keys={\r\n    API_KEY:\"Y3sErocysZ8PzKAdSVnZfglbCtSGMGw3\"\r\n}\r\n//Y3sErocysZ8PzKAdSVnZfglbCtSGMGw3\r\n// 6YDrQ10g5FAA0k68qYXEYeTedWWTVAzL\r\n// AYthUeKgEFWgB4WIvIEGAxrQr2RrslKb","import * as actionType from \"./actionType\"\r\nimport axios from 'axios'\r\nimport {keys} from '../../keys'\r\n\r\nexport const addOrRemoveFavorites=()=>{\r\n    if(localStorage.getItem(\"myFavWeather\")===null) localStorage.setItem('myFavWeather', \"[]\");\r\n    \r\n    let favoritesArr = JSON.parse(localStorage.getItem(\"myFavWeather\"));\r\n    let namesArr = favoritesArr.map(name=>{\r\n        return name.city\r\n    })\r\n    \r\n    \r\n    return (dispatch,getState)=>{\r\n        if(namesArr.includes(getState().weather.currPick.city)){\r\n            favoritesArr=favoritesArr.filter(name=>{\r\n                return name.city!==getState().weather.currPick.city\r\n            })\r\n            localStorage.setItem('myFavWeather', JSON.stringify(favoritesArr));\r\n            dispatch({type:actionType.UPDATE_FAVORITES,payload:favoritesArr})\r\n        }\r\n        else{\r\n            favoritesArr.push(getState().weather.currPick)\r\n            localStorage.setItem('myFavWeather', JSON.stringify(favoritesArr));\r\n            dispatch({type:actionType.UPDATE_FAVORITES,payload:favoritesArr})\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const callCurrentWeather=(arrCallkeys)=>{\r\n   return (dispatch,getState)=>{\r\n    arrCallkeys.map(callKey=>{\r\n        const URL_CURRENT_WEATHER=`https://dataservice.accuweather.com/currentconditions/v1/${callKey.key}?apikey=${keys.API_KEY}`\r\n        axios.get(URL_CURRENT_WEATHER).then(res=>{\r\n            dispatch({type:actionType.UPDATE_FAVORITES,payload:[...getState().favorites.favoritesArr,{...res.data[0],city:callKey.city}]})\r\n        }).catch(err=>{\r\n        \r\n        })\r\n    })\r\n    \r\n   }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport {connect} from 'react-redux'\r\nimport NavBar from './NavBar'\r\nimport * as actionType from '../store/actions/index'\r\nclass Layout extends Component {\r\n  componentDidMount(){\r\n    this.props.initCall()\r\n  }\r\n  render(){\r\n    this.props.isBlack ? document.getElementById(\"myBody\").setAttribute(\"class\",\"isBlack\"):document.getElementById(\"myBody\").setAttribute(\"class\",\"\")\r\n    return (\r\n      <div className={this.props.isBlack?\"isBlack\":\"\"}>\r\n          <NavBar isBlack={this.props.isBlack} isFahren={this.props.isFahren} toggleColorHandler={this.props.toggleColorHandler} toggleWeatherHandler={this.props.toggleWeatherHandler}/>\r\n      <div className=\"container\">\r\n        {this.props.children}\r\n      </div>\r\n       \r\n           \r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      isBlack:state.app.isBlack,\r\n      isFahren:state.app.isFahren\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps=(disatch)=>{\r\n  return{\r\n    toggleColorHandler:()=>disatch(actionType.toggleColorHandler()),\r\n    toggleWeatherHandler:()=>disatch(actionType.toggleWeatherHandler()),\r\n    initCall:()=>disatch(actionType.initCall())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Layout)","import * as actionType from \"./actionType\"\r\n\r\nexport const toggleColorHandler=()=>{\r\n    return (dispatch,getState)=>{\r\n        dispatch({type:actionType.CHANGE_COLOR_THEME,payload:!getState().app.isBlack})\r\n    }\r\n}\r\nexport const toggleWeatherHandler=()=>{\r\n    return (dispatch,getState)=>{\r\n        dispatch({type:actionType.CHANGE_WEATHER_TYPE,payload:!getState().app.isFahren})\r\n    }\r\n}\r\n\r\n","import * as actionType from \"./actionType\"\r\nimport axios from 'axios';\r\nimport {keys} from '../../keys'\r\n \r\nexport const initCall=()=>{\r\n    return (dispatch,getState)=>{\r\n        const URL_CURRENT_WEATHER=`https://dataservice.accuweather.com/currentconditions/v1/215854?apikey=${keys.API_KEY}`\r\n            axios.get(URL_CURRENT_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_CURR_WEATHER,payload:ress.data})\r\n                dispatch({type:actionType.SET_CURR_PICK,payload:{city:\"Tel Aviv\",key:\"215854\"}}) \r\n            }).catch(err=>{\r\n                dispatch({type:actionType.ERROR,payload:err})\r\n                \r\n            })\r\n            const URL_WEEKLY_WEATHER=`https://dataservice.accuweather.com/forecasts/v1/daily/5day/215854?apikey=${keys.API_KEY}&metric=true`\r\n            axios.get(URL_WEEKLY_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_WEEKLY_WEATHER,payload:ress.data.DailyForecasts})\r\n                \r\n            }).catch(err=>{\r\n                dispatch({type:actionType.ERROR,payload:err})\r\n                \r\n            })\r\n    }\r\n}\r\n\r\nexport const onTextChange=(text)=>{\r\n    return (dispatch,getState)=>{\r\n        dispatch({type:actionType.CHANGE_USER_INPUT,payload:text})\r\n        const URL_AUTO_COMPLETE=`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${keys.API_KEY}&q=${getState().weather.userInput}&language=en-us`\r\n        \r\n        axios.get(URL_AUTO_COMPLETE).then(res=>{\r\n            dispatch({type:actionType.SET_SUGGESTIONS,payload:res.data})\r\n            let tempPick=getState().weather.currPick.key!==\"\"?getState().weather.currPick:{key:getState().weather.suggestions[0].Key,city:getState().weather.suggestions[0].LocalizedName}\r\n            const URL_CURRENT_WEATHER=`https://dataservice.accuweather.com/currentconditions/v1/${tempPick.key}?apikey=${keys.API_KEY}`\r\n            axios.get(URL_CURRENT_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_CURR_WEATHER,payload:ress.data})\r\n                dispatch({type:actionType.SET_CURR_PICK,payload:{city:res.data[0].LocalizedName,key:res.data[0].Key}}) \r\n            }).catch(err=>{\r\n                dispatch({type:actionType.ERROR,payload:err})\r\n                \r\n            })\r\n            const URL_WEEKLY_WEATHER=`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${tempPick.key}?apikey=${keys.API_KEY}&metric=true`\r\n            axios.get(URL_WEEKLY_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_WEEKLY_WEATHER,payload:ress.data.DailyForecasts})\r\n                \r\n            }).catch(err=>{\r\n                dispatch({type:actionType.ERROR,payload:err})\r\n                \r\n            })\r\n        }).catch(err=>{\r\n            dispatch({type:actionType.ERROR,payload:err})\r\n            \r\n        })\r\n        \r\n    }\r\n}\r\nexport const onSuggestionSelect=(suggestion)=>{\r\n    return (dispatch,getState)=>{\r\n        dispatch({type:actionType.CHANGE_USER_INPUT,payload:suggestion.LocalizedName})\r\n        dispatch({type:actionType.SET_CURR_PICK,payload:{city:suggestion.LocalizedName,key:suggestion.Key}})\r\n        const URL_CURRENT_WEATHER=`https://dataservice.accuweather.com/currentconditions/v1/${getState().weather.currPick.key}?apikey=${keys.API_KEY}`\r\n            axios.get(URL_CURRENT_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_CURR_WEATHER,payload:ress.data})\r\n            }).catch(err=>{})\r\n            const URL_WEEKLY_WEATHER=`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${getState().weather.currPick.key}?apikey=${keys.API_KEY}&metric=true`\r\n            axios.get(URL_WEEKLY_WEATHER).then(ress=>{\r\n                dispatch({type:actionType.SET_WEEKLY_WEATHER,payload:ress.data.DailyForecasts})\r\n                \r\n            }).catch(err=>{})\r\n        dispatch({type:actionType.SET_SUGGESTIONS,payload:[]})\r\n        \r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst AutoComplete=({inputValue,suggestions,onTextChange,onSelect})=> {\r\n    const renderSuggestions=()=>{\r\n        if(!suggestions.length) return null\r\n        return(\r\n            <ul>\r\n                {suggestions.map((item,i)=><li onClick={()=>onSelect(item)} key={i} >{item.LocalizedName}</li>)}\r\n            </ul>\r\n        )\r\n}\r\n    return (\r\n        <div className=\"AutoCompleteText mt-3\">\r\n            <input placeholder=\"Enter City...   example:'Tel Aviv'\" value={inputValue} onChange={(e) => onTextChange(e.target.value)}  type=\"text\"/>\r\n            {renderSuggestions()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AutoComplete;","import React from 'react';\r\n\r\nconst WeatherUI = ({ currentWeather,city, fiveNext,isFahren ,onAddFav}) => {\r\n    const dateToDay = (dateStr) => {\r\n        // \"2019-11-25T07:00:00+09:00\"\r\n        let days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        let d = new Date(dateStr);\r\n        let dayName = days[d.getDay()];\r\n        return dayName\r\n\r\n    }\r\n    const iconNumber = (num) => {\r\n        if (num <= 9) return \"0\" + num\r\n        else return num\r\n    }\r\n    const cToF=(celsius)=> {\r\n        let fahr = celsius * 9 / 5 + 32;\r\n        return Math.floor(fahr)\r\n    }\r\n    const isLike=()=>{\r\n        if(localStorage.getItem(\"myFavWeather\")===null || city===\"\") return false\r\n        let favoritesArr = JSON.parse(localStorage.getItem(\"myFavWeather\"));\r\n        let namesArr = favoritesArr.map(name=>{\r\n        return name.city\r\n        })\r\n        if(namesArr.includes(city)) return true\r\n        \r\n    }\r\n    \r\n    return (\r\n        <div className=\"d-flex flex-column justify-content-between WeatherUI mt-3 \">\r\n\r\n            <div className=\"d-flex justify-content-between mt-3\">\r\n                <div className=\"d-flex\">\r\n\r\n                    <img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${iconNumber(currentWeather[0].WeatherIcon)}-s.png`} alt=\"currentWeatherIcon\" />\r\n                    <div className=\"d-flex flex-column justify-content-between ml-3\">\r\n                        <h3 className=\"\">{city}</h3>\r\n                        {isFahren?<h3>{cToF(currentWeather[0].Temperature.Metric.Value)} &#8457;</h3>:<h3>{currentWeather[0].Temperature.Metric.Value} &#8451;</h3>} \r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mr-2\">\r\n                    <button style={isLike()?{color:\"red\"}:null} className=\"btn\"><i className=\"material-icons\">favorite</i></button>\r\n                    <button className=\"btn btn-primary\" onClick={(e)=>onAddFav()} > add Favorite</button>\r\n                </div>\r\n            </div>\r\n            {/* Five Next Days */}\r\n            <div className=\"d-flex justify-content-around text-center dailyBox pb-3 pt-2\">\r\n                {fiveNext && fiveNext.map((day,i) => {\r\n                    cToF(day.Temperature.Minimum.Value)\r\n                    return (\r\n                        <div key={i} className=\"d-flex flex-column justify-content-around mt-1\">\r\n                            <h5>{dateToDay(day.Date)}</h5>\r\n                            {isFahren?<p>{cToF(day.Temperature.Minimum.Value)} &#8457;</p>:<p>{day.Temperature.Minimum.Value} &#8451;</p>}  \r\n                            <img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${iconNumber(day.Day.Icon)}-s.png`} alt=\"dailyIcon\" />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default WeatherUI;\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport * as actionType from '../store/actions/index'\r\nimport AutoComplete from './AutoComplete';\r\nimport WeatherUI from './WeatherUI'\r\nclass Weather extends Component {\r\n    render() {  \r\n        return (\r\n            <div>\r\n                <AutoComplete \r\n                inputValue={this.props.userInputText} \r\n                onTextChange={this.props.onTextChange} \r\n                suggestions={this.props.suggestionsArr} \r\n                onSelect={this.props.onSuggestionSelect}\r\n                />\r\n                {this.props.currentWeather.length>=1 && \r\n                <WeatherUI \r\n                currentWeather={this.props.currentWeather} \r\n                city={this.props.currentPick.city} \r\n                fiveNext={this.props.weeklyWeather} \r\n                isFahren={this.props.isFahren}\r\n                onAddFav={this.props.addOrRemoveFavorites}\r\n                />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateHandler = state => {\r\n    return {\r\n        userInputText:state.weather.userInput,\r\n        suggestionsArr:state.weather.suggestions,\r\n        currentWeather:state.weather.currWeather,\r\n        currentPick:state.weather.currPick,\r\n        weeklyWeather:state.weather.fiveNext,\r\n        isFahren:state.app.isFahren\r\n    };\r\n};\r\nconst mapStateDispatch = dispatch => {\r\n    return {\r\n        onTextChange:(text)=> dispatch(actionType.onTextChange(text)),\r\n        onSuggestionSelect:(suggestion)=>dispatch(actionType.onSuggestionSelect(suggestion)),\r\n        addOrRemoveFavorites:()=>dispatch(actionType.addOrRemoveFavorites())\r\n    };\r\n};\r\nexport default connect(mapStateHandler,mapStateDispatch)(Weather) \r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport * as actionType from '../store/actions/index'\r\nclass Favorites extends Component {\r\n    state = {\r\n        favoritesLocalStorage: [],\r\n        isLoaded: false,\r\n        message: \"\"\r\n    }\r\n    componentDidMount() {\r\n        if (localStorage.getItem(\"myFavWeather\") === null) this.setState({ message: \"add some favorites by the button `add too favorite` at home page\" })\r\n        else {\r\n            this.setState({ favoritesLocalStorage: JSON.parse(localStorage.getItem(\"myFavWeather\")) }, () => {\r\n                this.props.callCurrentWeather(this.state.favoritesLocalStorage)\r\n                this.setState({ isLoaded: true })\r\n            })\r\n        }\r\n    }\r\n    iconNumber = (num) => {\r\n        if (num <= 9) return \"0\" + num\r\n        else return num\r\n    }\r\n    cToF = (celsius) => {\r\n        let fahr = celsius * 9 / 5 + 32;\r\n        return Math.floor(fahr)\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <div style={{ height: \"35vh\" }} className=\"row d-flex justify-content-around text-center dailyBox mt-5\">\r\n                {this.state.message !== \"\" ? <p className=\"card-body\">{this.state.message}</p> : null}\r\n\r\n                {this.state.isLoaded && this.props.favoritesArr.map((fav, i) => {\r\n                    return (\r\n                        <div key={\"fav\" + i} className=\"d-flex flex-column justify-content-around mt-1\">\r\n                            <h5>{fav.city}</h5>\r\n                            {this.props.isFahren ? <p>{this.cToF(fav.Temperature.Metric.Value)} &#8457;</p> : <p>{fav.Temperature.Metric.Value} &#8451;</p>}\r\n                            <img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${this.iconNumber(fav.WeatherIcon)}-s.png`} alt=\"dailyIcon\" />\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateHandler = state => {\r\n    return {\r\n        favoritesArr: state.favorites.favoritesArr,\r\n        isFavLoad: state.favorites.isFavorite,\r\n        isFahren: state.app.isFahren\r\n    };\r\n};\r\nconst mapStateDispatch = dispatch => {\r\n    return {\r\n        callCurrentWeather: (arrCallkeys) => dispatch(actionType.callCurrentWeather(arrCallkeys)),\r\n    };\r\n};\r\nexport default connect(mapStateHandler, mapStateDispatch)(Favorites) \r\n","import React, { Component } from 'react';\nimport Layout from './components/Layout';\nimport {Switch,Route} from 'react-router-dom';\nimport Weather from './components/Weather';\nimport Favorites from './components/Favorites'\nclass App extends Component {\n  componentDidMount(){\n    \n    \n  }\n  render() {\n    const route=(\n      <Switch>\n        <Route exact path=\"/\" component={Weather} />\n        <Route path=\"/favorite\" component={Favorites} />\n        <Route component={() => (<div>404 Not found </div>)} />\n      </Switch>\n      \n    )\n    return (\n      <Layout>\n        {route}\n      </Layout>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject,newObject)=>{\r\n    return {\r\n        ...oldObject,\r\n        ...newObject\r\n    }\r\n}","import * as actionType from \"../actions/actionType\"\r\nimport { updateObject } from \"./utilReducer\"\r\nconst initState = {\r\n  userInput: \"\",\r\n  suggestions: [],\r\n  currPick: {city:\"\",key:\"\"},\r\n  currWeather: [],\r\n  fiveNext: [],\r\n  err:\"\"\r\n}\r\nconst weatherReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actionType.CHANGE_USER_INPUT:\r\n      return updateObject(state, { userInput: action.payload })\r\n    case actionType.SET_SUGGESTIONS:\r\n      return updateObject(state, { suggestions: action.payload.length > 3 ? action.payload.slice(0, 3) : action.payload })\r\n    case actionType.SET_CURR_PICK:\r\n      return updateObject(state, { currPick: action.payload })\r\n    case actionType.SET_CURR_WEATHER:\r\n      return updateObject(state,{currWeather:action.payload})\r\n    case actionType.SET_WEEKLY_WEATHER:\r\n      return updateObject(state,{fiveNext:action.payload})\r\n      case actionType.SET_WEEKLY_WEATHER:\r\n        return updateObject(state,{err:action.payload})\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default weatherReducer","import * as actionType from \"../actions/actionType\"\r\nimport { updateObject } from \"./utilReducer\"\r\nconst initState = {\r\n  isFahren:false,\r\n  isBlack:false\r\n}\r\nconst appReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actionType.CHANGE_COLOR_THEME:\r\n      return updateObject(state, { isBlack:action.payload })\r\n    case actionType.CHANGE_WEATHER_TYPE:\r\n        return updateObject(state, { isFahren:action.payload })\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default appReducer","import * as actionType from \"../actions/actionType\"\r\nimport { updateObject } from \"./utilReducer\"\r\nconst initState = {\r\n  favoritesArr:[],\r\n  isFavorite:false\r\n}\r\nconst appReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actionType.UPDATE_FAVORITES:\r\n      return updateObject(state, { favoritesArr:action.payload,isFavorite:true })\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default appReducer","import weatherReducer from './weatherReducer'\r\nimport appReducer from './appReducer'\r\nimport favoritesReducer from './favoritesReducer'\r\nimport { combineReducers } from 'redux'\r\nconst rootReducer = combineReducers({\r\n    app:appReducer,\r\n    weather: weatherReducer,\r\n    favorites:favoritesReducer\r\n    \r\n    \r\n})\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom'\nimport {createStore,applyMiddleware,compose,} from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n  \nconst composeEnchancers = process.env.NODE_ENV ===\"development\" ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\nconst store=createStore(rootReducer,composeEnchancers(applyMiddleware(thunk)))\nconst app=(\n    <Provider store={store}>\n        <HashRouter basename='/'>\n            <App/>\n        </HashRouter>\n    </Provider>\n    )\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}